package Int2byte

//=============================
//一些int与byte的转换
//
//----------------------------------------------------------------------------
//将两个byte类型合并为一个uint16类型,组合后b1，b2排列，如果是小端请自行调换位置
//------------------------------------------------------------------------------
func Twobyte_to_uint16(bh byte, bl byte) uint16 {
	return uint16(bh)<<8 + uint16(bl) //bh左移8位再加上低位的bl
}

//----------------------------------------------------------------------------
//将4个byte类型合并为一个uint32类型,组合后b1，b2排列，如果是小端请自行调换位置
//------------------------------------------------------------------------------
func Twobyte_to_uint32(b1 byte, b2 byte, b3 byte, b4 byte) uint32 {
	return uint32(b1)<<24 + uint32(b2)<<16 + uint32(b3)<<8 + uint32(b4) //bh左移8位再加上低位的bl
}

//--------------------------------
//同上不过是int16
//-----------------------------------
func Twobyte_to_int16(b1 byte, b2 byte) int16 {
	return int16(b1)<<8 + int16(b2) //b1左移8位再加上低位的b2
}

//------------------------------------
//--uint16转换为2个byte
//----------------------------------
func Uint16_to_twobyte(i uint16) (byte, byte) {
	bh := byte(i >> 8)   //高位
	bl := byte(i & 0xff) //低位
	return bh, bl
}

//------------------------------------
//--int16转换为2个byte
//----------------------------------
func Int16_to_twobyte(i int16) (byte, byte) {
	bh := byte(i >> 8)   //高位
	bl := byte(i & 0xff) //低位
	return bh, bl
}

//------------------------------------
//--uint32转换为4个byte
//----------------------------------
func Uint32_to_fourbyte(i uint32) (byte, byte, byte, byte) {
	bhh := byte(i >> 24) //高位
	bh := byte(i >> 16)  //低位
	bl := byte(i >> 8)
	bll := byte(i & 0xff) //低位
	return bhh, bh, bl, bll
}
